"use strict";(self.webpackChunkionio_website=self.webpackChunkionio_website||[]).push([[477],{10:function(n){n.exports=JSON.parse('{"blogPosts":[{"id":"ionio-calculator","metadata":{"permalink":"/blog/ionio-calculator","source":"@site/blog/2022-09-01-ionio-calculator.md","title":"Build your first Liquid smart contract with Ionio SDK","description":"Build a calculator smart contract with Elements Tapscript to be deployed on the Liquid Network","date":"2022-09-01T00:00:00.000Z","formattedDate":"September 1, 2022","tags":[{"label":"ionio","permalink":"/blog/tags/ionio"},{"label":"sdk","permalink":"/blog/tags/sdk"},{"label":"tutorial","permalink":"/blog/tags/tutorial"},{"label":"smart contract","permalink":"/blog/tags/smart-contract"},{"label":"workshop","permalink":"/blog/tags/workshop"},{"label":"liquid network","permalink":"/blog/tags/liquid-network"}],"readingTime":3.83,"truncated":true,"authors":[{"name":"Marco Argentieri","title":"Ionio contributor","url":"https://github.com/tiero","image_url":"https://github.com/tiero.png","imageURL":"https://github.com/tiero.png"}]},"content":"You got your faboulos script with all those cute opcodes, and now what? **Ionio SDK FTW!**\\n\\n\x3c!--truncate--\x3e\\n\\n\\n## Context\\n\\nIn the Bitcoin world, most of the possible scripts are *de-facto* standards all wallets follow, set in stone by the wallet developer.\\n\\nIn a **post-Simplicty** world, Bitcoin (tap)scripts will introduce much more capabilities, but \\nstadardize all possible combination in all wallets becomes impossibile, will be the user (or any external app he\'s interacting with) to instruct the wallet what to do at runtime.\\n\\n\\n**Output Descriptors** and **Miniscript** could be a good candidate on how to generalize a way to import script, but i) lack of extensibility in cooperative script building scenarios ii) need to write a parser/compiler for each language makes it a bit [cumbersome for wallet/libraries to work with](/docs/Artifact#alternatives), plus the \\"policy oriented\\" nature does not well fit the introspection (ie. covenants) paradigm Simplicity will allow.\\n\\nThe feature to import a **script template** is fundamental for the wallet to **track balances** and to know **how spend** those coins in the future.\\n\\nThe **Ionio Artifact** it\'s a JSON file that fully describe how a **Pay to Taproot** address is constructed, how the contract behaves and what it should be expected to do spend it in the future. The documentation fot the data structure can be found [here](/docs/Artifact#structure)\\n\\n# \ud83e\uddee You first \\"calculator\\"\\n \\n\\n## Dev Environment \\n\\n- [Docker Linux](https://docs.docker.com/desktop/linux/install) or [Docker Desktop for Mac](https://docs.docker.com/desktop/mac/install)\\n- [Nigiri](https://nigiri.vulpem.com)\\n- nodejs\\n- yarn (optional, you can use npm)\\n\\n\\n### Nigiri\\n\\nInstall Nigiri\\n\\n```sh\\ncurl https://getnigiri.vulpem.com | bash\\n```\\n\\n2. Run a Liquid box\\n\\n```sh\\nnigiri start --liquid\\n```\\n\\n### Install dependencies & config\\n\\n1. Project setup\\n\\n\\nPull a Svelte starter app\\n\\n```sh\\nnpx degit \\"tiero/svelte-webpack-bulma\\" ionio-app\\n```\\n\\nEnter the folder \\n```\\ncd ionio-app\\n```\\n\\nInstall depenendencies \\n```\\nyarn add @ionio-lang/ionio tiny-secp256k1\\n```\\n\\n\\n2. Create a `calculator.json` file in `src`\\n\\n```json\\n{\\n  \\"contractName\\": \\"Calculator\\",\\n  \\"constructorInputs\\": [\\n    {\\n      \\"name\\": \\"sum\\",\\n      \\"type\\": \\"number\\"\\n    }\\n  ],\\n  \\"functions\\": [\\n    {\\n      \\"name\\": \\"sumMustBeThree\\",\\n      \\"functionInputs\\": [\\n        {\\n          \\"name\\": \\"a\\",\\n          \\"type\\": \\"number\\"\\n        },\\n        {\\n          \\"name\\": \\"b\\",\\n          \\"type\\": \\"number\\"\\n        }\\n      ],\\n      \\"require\\": [],\\n      \\"asm\\": [\\n        \\"OP_ADD\\",\\n        \\"$sum\\",\\n        \\"OP_EQUAL\\"\\n      ]\\n    }\\n  ]\\n}\\n```\\n\\n### Add Layout and state\\n\\n1. Open `App.svelte` in your editor\\n\\n2. Add layout after the title box \\n\\n```html\\n<div class=\\"box\\">\\n  <h1 class=\\"title\\">Calculator</h1>\\n  <p class=\\"has-text-weight-bold\\">\\n    {contractAddress}\\n  </p>\\n  <hr />\\n\\n  {#if txhex.length > 0} \\n    <hr />\\n    <p class=\\"subtitle\\">Raw transaction</p>\\n    <input class=\\"input\\" value={txhex} />\\n  {/if}\\n</div>\\n```\\n\\n4. Add script section on top\\n\\n```ts\\n<script type=\\"ts\\">\\n  import { Artifact, Contract } from \'@ionio-lang/ionio\';\\n  import { networks, address, ElementsValue, AssetHash } from \'liquidjs-lib\';\\n  import * as ecc from \'tiny-secp256k1\';\\n  import artifact from \'./calculator.json\';\\n\\n  // instantiate the secp256-zkp wasm library\\n  // define the network we going to work\\n  const network = networks.regtest;\\n  // create empty state\\n  let txhex = \'\';\\n  // amounts to use for spending\\n  const sats = 100000;\\n  const fee = 100;\\n\\n  // \ud83d\udcda Let\'s compile the script\\n  const contract = new Contract(\\n    // our JSON artifact file\\n    artifact as Artifact,\\n    // our constructor to replace template strings\\n    [3],\\n    // network for address encoding\\n    network,\\n    // injectable secp256k1 libraries\\n    { ecc, zkp: null }\\n  );\\n  const contractAddress = contract.address;\\n<\/script>\\n```\\n\\n\\n### \ud83d\udcb0 Fund \\n\\nRun the app with `yarn dev` to see the address for your calculator\\n\\n```sh\\n# send 100k sats to the contract\\n# this will auto-mine a block\\nnigiri faucet --liquid <contract_address> 0.001\\n```\\n\\nYou can open the exploer at `http://localhost:5001` and copy/paste address to check utxos\\n\\nTrack down the `txid` and `vout` of the new unspent output that locks coin in the calculator\\n\\n### \ud83d\udcb8 Spend\\n\\n1. Add a `onClick` function to be triggered by button\\n\\n\\n```ts\\n  const onClick = async () => {\\n    const txid = prompt(\'Enter a transaction hash\');\\n    const vout = prompt(\'Enter the vout\');\\n\\n    // attach to the funded contract using the utxo\\n    const instance = contract.from(\\n      // tranaction ID\\n      txid,\\n      // previous output index\\n      parseInt(vout),\\n      // the full previous output\\n      {\\n        script: address.toOutputScript(contractAddress),\\n        value: ElementsValue.fromNumber(sats).bytes,\\n        asset: AssetHash.fromHex(network.assetHash).bytes,\\n        nonce: Buffer.alloc(0),\\n      }\\n    );\\n\\n    const recipient = prompt(\'Enter a recipient to send funds to\');\\n\\n    const tx = await instance.functions\\n      .sumMustBeThree(1, 2)\\n      .withRecipient(recipient, sats - fee, network.assetHash)\\n      .withFeeOutput(fee)\\n      .unlock();\\n\\n    // extract and broadcast\\n    txhex = tx.toHex();\\n  };\\n```\\n\\n2. Add the `onClick` to the `on:click` Svelte directive of the button\\n```html\\n<button class=\\"button is-primary\\" on:click={onClick}> Sum must be 3 </button>\\n```\\n\\n\\n3. \ud83d\ude80 push the transaction\\n\\nRun the app and click on the button `Sum must be 3`\\n\\nIt will ask you to enter a transaction hash and vout and an recipient address.\\n\\nGet a fresh unconfidential address\\n\\n```sh \\nnigiri rpc --liquid validateaddress `nigiri rpc --liquid getnewaddress`\\n```\\n\\nBroadcast \\n```sh\\nnigiri push --liquid <txhex>\\n```"}]}')}}]);